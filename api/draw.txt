<template>
  <div class="body">
    <div class="container">
<!--      <div class="flex-container" v-if="isNet">-->
        <div class="box">
          <div style="height: 100%">
            <div style="height: 90%; overflow-y: auto">
              <div>
                <img :src="src" style="width:100%;height:50%">
              </div>
              <br/>
              正向提示词(英文更准确~):
              <el-input
                  type="textarea"
                  :rows="2"
                  placeholder="请输入绘画提示词"
                  v-model="form.prompt">
              </el-input>
              <br/>
              <div class="header">
                <div class="title">
                  <span>绘画风格</span>
                  <el-popover
                      placement="bottom"
                      effect="dark"
                      title="输出模型"
                      :width="300"
                      trigger="hover"
                      content="用于控制生成图像的数据模型，可以影响图像的内容和样式"
                  >
                    <template #reference>
                      <el-icon>
                        <info-filled/>
                      </el-icon>
                    </template>
                  </el-popover>
                </div>
              </div>
              <div style="padding: 15px">
                <el-select
                    v-model="form.modelName"
                    class="m-2"
                    placeholder="请选择绘画风格"
                    size="large"
                    style="width: 100%"
                >
                  <el-option
                      v-for="item in modelList"
                      :key="item.modelName"
                      :label="item.textName"
                      :value="item.modelName"
                  />
                </el-select>
              </div>
              <div class="header">
                <div class="title">
                  <span>采样方法</span>
                  <el-popover
                      placement="bottom"
                      effect="dark"
                      title="采样器"
                      :width="300"
                      trigger="hover"
                      content="用于控制生成图像的采样器索引，可以影响图像的内容和样式。"
                  >
                    <template #reference>
                      <el-icon>
                        <info-filled/>
                      </el-icon>
                    </template>
                  </el-popover>
                </div>
              </div>
              <div style="padding: 15px">
                <el-select
                    v-model="form.sampler_index"
                    class="m-2"
                    placeholder="Select"
                    size="large"
                    style="width: 100%"
                >
                  <el-option
                      v-for="item in samplerList"
                      :key="item"
                      :label="item"
                      :value="item"
                  />
                </el-select>
              </div>
              高度:
              <div class="block">
                <el-slider
                    v-model="height"
                    max=2048
                    show-input>
                </el-slider>
              </div>
              <br>

              长度:
              <div class="block">
              <el-slider
                  v-model="width"
                  max=2048
                  show-input>
              </el-slider>
              </div>
              <br>

              <div class="header">
                <div class="title">
                  <span>迭代步数</span>
                  <el-popover
                      placement="bottom"
                      effect="dark"
                      title="绘制次数"
                      :width="300"
                      trigger="hover"
                      content="生成图像时的最大步骤数，步骤数越多，生成的图像可能会更加详细，但处理时间也会增加。"
                  >
                    <template #reference>
                      <el-icon>
                        <info-filled/>
                      </el-icon>
                    </template>
                  </el-popover>
                </div>
              </div>
              <div style="padding: 15px">
                <el-select
                    v-model="form.steps"
                    class="m-2"
                    placeholder="Select"
                    size="large"
                    style="width: 100%"
                >
                  <el-option
                      v-for="item in stepsList"
                      :key="item"
                      :label="item"
                      :value="item"
                  />
                </el-select>
              </div>
            </div>

            <div
                style="
                    border-top: 1px solid var(--textColor5);
                    display: flex;
                    align-items: center;
                    justify-content: space-between;
                    height: 10%;
                    padding: 0 10px;
                    font-weight: 500;
                  "
            >
              <div style="font-size: 9px">
                每次绘图消耗5个SUPER币
              </div>
              <div>
                <el-button round color="var(--themeColor2)" @click="requestDraw" :loading="load===1">
                  立即生成
                </el-button>
                <img :src="decodedImages" alt="Decoded Image" v-if="loading === 2">
                <span v-if="loading === 1">错误</span>
              </div>
            </div>
          </div>
        </div>
        <div class="content">
          <div v-if="load===0">
            <div style="text-align: center;padding-bottom: 40px">创作欣赏</div>
            <div style="max-width: 480px">
              <el-row :gutter="4">
                <el-col v-for="(item,index) in imageList" :key="index" :md="8">
                  <el-image class="public-image" :src="decodedImages" fit="cover" :preview-src-list="[imageUrl+item]"/>
                </el-col>
              </el-row>
            </div>
            <div style="text-align: center;font-size: 13px;margin-top: 20px;font-weight: 500;color: #888888">
              快来生成属于自己的创作吧~
            </div>
          </div>
          <ViewState v-if="load===1" LoadText="正在生成(你可以进行其他操作,请勿刷新浏览器)..."/>
          <el-image v-if="load===2" :src="imageUrl+image"
                    style="width:500px;height: 350px" fit="cover" :preview-src-list="[imageUrl+image]"/>
          <ViewState
              v-if="load===3"
              @ClickTheButton="back"
              Type="error"
              ErrorText="哦豁!绘制失败了 请稍后再试"
              IsShowBottom
              ButtonText="好的"
          />
        </div>
      </div>
<!--    </div>-->
  </div>

  <LoginDialog :show="loginVisible" @close="loginVisible = false"/>

</template>

<script>

import axios from "axios";
import {ElNotification} from "element-plus";
import {
  GetSdDrawListPublic,
  GetSdModelList, postSdDraw
} from "../../../api/BSideApi";
import {onMounted, ref} from "vue";
import {InfoFilled} from "@element-plus/icons-vue";
import store from "@/store";
import LoginDialog from "@/components/LoginDialog.vue";
import ViewState from "@/components/ViewState.vue";
// import LeftNavigationBar from "@/components/LeftNavigationBar.vue";

export default {
  name: "DrawingView",
  components: {ViewState, LoginDialog, InfoFilled},
  data() {
    return {
      src: 'https://img2.imgtp.com/2024/03/17/3qkbcd2h.png',
      textarea: '',
      loading: '0',
      decodedImages: [],
      prompt: 'lovely girl',
      step: '',
      height: '512',
      width: '512',
    }
  },
  methods: {
    redirectTo() {
      window.location.href = "https://sd.hepingan.top";
    },
    requestImage() {
      console.log("开始发送请求");
      this.loading=1;
      //TODO
      axios.post("https://sd.hepingan.top/sdapi/v1/txt2img", {
        "prompt": this.prompt,
        "step": this.step,
        "height": this.height,
        "width": this.width,
        "override_settings": {
          "sd_model_checkpoint": this.value,
        },
      }, {
        headers: {
          "Authorization": "Basic Og=="
        }
      }).then(response => {
        console.log(response.status);
        this.loading = 2;
        this.decodeImages(response.data.images); // 解码并展示图像数据
        // this.costMoney();
      }).catch(err => {
        console.error(err);
        this.loading = 3;
      });
    },
    decodeImages(images) {
      const decodedImages = images.map(img => this.base64Decode(img));
      this.decodedImages = decodedImages;
    },
    base64Decode(base64) {
      const binaryString = window.atob(base64);
      const len = binaryString.length;
      const bytes = new Uint8Array(len);
      for (let i = 0; i < len; ++i) {
        bytes[i] = binaryString.charCodeAt(i);
      }
      const blob = new Blob([bytes.buffer], { type: 'image/png' });
      return URL.createObjectURL(blob); // 将解码后的图像数据转换为URL
    },
    async uploadImage() {
      const formData = new FormData();
      this.decodedImages.forEach((item) => formData.append('file', item.file));
      const res = await axios.post("https://www.imgtp.com/api/upload",formData,{
        headers:{
          "token": "34ea3eb2efcfb085b6af1032058dbb45",
          "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36 Edg/121.0.0.0"
        }
      });
      if (res.status === 200){
        console.log("上传成功");
        return "上传成功";
      }else {
        console.log("上传失败");
        return "上传失败";
      }
    }

  },
  setup(){
    const isNet = ref(false)

    const tempFile = ref('')

    const modelList = ref([]);

    const imageUrl = ref('')

    const imageList = ref([])

    const stepsList = ref([20, 40, 60, 80, 100])

    const samplerList = ref([
      "Euler a", "Euler", "LMS", "Heun", "DPM2", "DPM2 a", "DPM++ 2S a", "DPM++ 2M", "DPM++ SDE",
      "DPM fast", "DPM adaptive", "LMS Karras", "DPM2 Karras", "DPM2 a Karras", "DPM++ 2S a Karras",
      "DPM++ 2M Karras", "DPM++ SDE Karras", "DDIM"
    ])

    const load = ref(0)

    async function getSdModelList() {
      try {
        let newVar = await GetSdModelList();
        if (newVar.length > 0) {
          modelList.value = newVar
          form.value.modelName = modelList.value[0].modelName
        }

      } catch (e) {
        console.log(e)
      }
    }

    async function getListPublic(){
      try {
        let newVar = await GetSdDrawListPublic();
        if (newVar.length >0){
          imageList.value = newVar
        }
      }catch (e){
        console.log(e)
      }
    }

    const image = ref('')

    const form = ref({
      modelName: "",
      images: "",
      steps: 20,
      sampler_index: "Euler a",
      width: 512,
      height: 512,
      prompt: 'lovely girl',
      negative_prompt: '',
    });



    let loginVisible = ref(false);

    onMounted(() => {
      imageUrl.value = process.env.VUE_APP_IMAGE;
      if (store.getters.userinfo) {
        getSdModelList()
        getListPublic()
      } else {
        loginVisible.value = true
      }
    })

    async function requestDraw() {
      console.log("开始发送请求");
      this.loading=1;
      //TODO
      axios.post("https://sd.hepingan.top/sdapi/v1/txt2img", {
        "prompt": form.value["prompt"],
        "step": form.value["steps"],
        "height": form.value["height"],
        "width": form.value["width"],
        "override_settings": {
          "sd_model_checkpoint": form.value["modelName"],
        },
      }, {
        headers: {
          "Authorization": "Basic Og=="
        }
      }).then(response => {
        console.log(response.status);
        this.loading = 2;
        this.decodeImages(response.data.images); // 解码并展示图像数据
        // this.costMoney();
      }).catch(err => {
        console.error(err);
        this.loading = 3;
      });
    }

    async function onSubmit() {
      if (load.value === 1) {
        return
      }
      let value = form.value;
      if (!value.prompt) {
        ElNotification({
          title: "错误",
          message: '请设置绘画提示词',
          type: "error",
        });
        return
      }
      const formData = new FormData();
      // 添加自定义参数到 FormData
      for (const key in form.value) {
        if (form.value[key]) {
          formData.append(key, form.value[key]);
          console.log(key)
        }
      }
      formData.append('env', 0)
      load.value = 1

      let promise = await postSdDraw(formData);
      if (promise.length >0){
        load.value=0;
        console.log("sd绘画成功")
        ElNotification({
          title: "正确",
          message: "绘图功能出现问题了OwO2",
          type: "error",
        })

      }else {
        load.value = 0
        ElNotification({
          title: "错误",
          message: "绘图功能出现问题了OwO",
          type: "error",
        });
      }
    }


    return {
      isNet,
      image,
      load,
      onSubmit,
      tempFile,
      imageUrl,
      modelList,
      form,
      imageList,
      stepsList,
      requestDraw,
      samplerList,
    };
  }

};
</script>

<style lang="scss" scoped>
:deep(.el-textarea) {
  .el-textarea__inner {
    background: var(--bgColor2);
    box-shadow: none;
    max-height: 400px;
    padding: 10px;
    font-size: 10px;
    color: var(--textColor2);

    &:hover {
      box-shadow: none;
      background: var(--bgColor2);
    }
  }

  ::placeholder {
    color: var(--textColor4); /* 将颜色值修改为您想要的占位符文字颜色 */
  }

  /* 兼容性处理 */
  :-ms-input-placeholder {
    color: var(--textColor4); /* 将颜色值修改为您想要的占位符文字颜色 */
  }
}

.body {
  width: 100%;
  height: 100%;
  box-sizing: border-box;
  flex-direction: column;
  flex: 1;
  align-items: center;
  justify-content: space-between;
  display: flex;
  overflow: hidden;
  background-color: var(--bgColor2);
}

@keyframes explainAnimation {
  from {
    transform: scale(0);
  }

  to {
    transform: scale(1);
  }
}

.container {
  animation: explainAnimation 0.3s;
  width: 100%;
  height: 100%;
  box-sizing: border-box;
}

.list:first-child {
  margin-top: 60px;
}

.list {
  margin-bottom: 40px;
}

.title {
  font-size: 14px;
  font-weight: 550;
}

.content {
  width: 100%;
  margin-top: 10px;
}

.item {
  width: 80%;
  height: 160px;
  background-color: var(--bgColor1);
  margin-bottom: 15px;
  border-radius: 8px;
  font-size: 15px;
  color: var(--bgColor2);
  padding: 20px;
  box-shadow: 0 5px 7px rgba(35, 35, 35, 0.06);
}

.item:hover {
  background-color: var(--bgColor1);
  cursor: pointer;
  transition: background-color 0.2s;
}

@media only screen and (max-width: 767px) {
  .container {
    padding: 0;
  }

  .list:first-child {
    margin-top: 30px;
  }

  .list {
    padding-left: 20px;
    padding-right: 20px;
  }

  .content {
    padding-left: 20px;
    padding-right: 20px;
    box-sizing: border-box;
  }
}

:deep(.el-input__inner) {
  background: var(--bgColor2);
  font-weight: 400;
  color: var(--textColor2);
}

:deep(.el-input__wrapper) {
  background: var(--bgColor2);
  box-shadow: none;
}

:deep(.el-input-group__append, .el-input-group__prepend) {
  border: none !important;
}

.flex-container {
  display: flex;
  justify-content: space-between;
  height: 100%;
}

.box {
  border: 1px solid var(--textColor5);
  height: 97%;
  width: 32%;
  max-width: 350px;
  background-color: var(--bgColor1);
  margin: 10px;
  border-radius: 10px;
  color: var(--textColor1);
  font-size: 14px;
  font-weight: 550;
}

.header {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.title {
  display: flex;
  align-items: center;
  padding: 15px 15px 0;
}

.title span {
  padding-right: 5px;
}

.button {
  padding: 15px 15px 0;
}

.input {
  padding: 15px;
}

.content {
  height: 100%;
  width: 75%;
  display: flex;
  justify-content: center;
  align-items: center;
  font-weight: 550;
  font-size: 18px;
}

.public-image {
  width: 150px;
  height: 190px;
  margin-bottom: 5px;
  border-radius: 8px
}

div::-webkit-scrollbar {
  display: none;
}

.size-container {
  padding: 10px;
  display: flex;
  align-items: center;
  flex-wrap: wrap;
}

.size-model {
  border-radius: 5px;
  margin: 5px auto;
  width: 98px;
  height: 90px;
  background-color: var(--dColor1);
  text-align: center;
  display: flex;
  justify-content: center;
  align-items: center;
  border: 1px solid var(--dColor1);
}

.size-model-selected {
  border-radius: 5px;
  margin: 5px auto;
  width: 98px;
  height: 90px;
  background-color: var(--dColor2);
  text-align: center;
  display: flex;
  justify-content: center;
  align-items: center;
  border: 1px solid rgb(129, 102, 231);
}


.size-logo {
  padding-bottom: 5px
}

.size-logo img {
  width: 23px;
  height: 23px
}

.size-proportion {
  padding-bottom: 2px
}

.size-text {
  font-size: 9px;
  font-weight: 500;
  color: #636363
}

.img {
  max-width: 100%;
  height: auto;
}


.body {
  width: 100%;
  height: 100%;
  box-sizing: border-box;
  flex-direction: column;
  flex: 1;
  align-items: center;

  display: flex;
  overflow: hidden;
  background-color: var(--bgColor2);
}

.container {
  animation: explainAnimation 0.3s;
  width: 100%;
  height: 100%;
  box-sizing: border-box;
}

.header {
  display: flex;
  justify-content: space-between;
  align-items: center;
}


</style>
